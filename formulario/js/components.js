
// M√≥dulo de componentes reutiliz√°veis
const Components = {
    // Cria um toggle switch
    toggleSwitch: function(label, checked = false) {
        return `
            <div class="toggle-row">
                <span class="toggle-label">${label}</span>
                <label class="toggle-switch">
                    <input type="checkbox" ${checked ? 'checked' : ''}>
                    <span class="toggle-slider"></span>
                </label>
            </div>
        `;
    },
    
    // Cria uma tabela de dados
    dataTable: function(headers, rows, actions = []) {
        let tableHeaders = headers.map(header => `<th>${header}</th>`).join('');
        
        let tableRows = rows.map(row => {
            let cells = row.map(cell => `<td>${cell}</td>`).join('');
            
            // Adicionar coluna de a√ß√µes se houver
            if (actions.length > 0) {
                let actionButtons = actions.map(action => 
                    `<button class="action-button ${action.danger ? 'danger' : ''}" title="${action.title}">${action.icon}</button>`
                ).join('');
                
                cells += `<td>${actionButtons}</td>`;
            }
            
            return `<tr>${cells}</tr>`;
        }).join('');
        
        return `
            <div class="table-container">
                <table>
                    <thead>
                        <tr>${tableHeaders}</tr>
                    </thead>
                    <tbody>
                        ${tableRows}
                    </tbody>
                </table>
            </div>
        `;
    },
    
    // Cria uma barra de progresso
    progressBar: function(percentage, color = 'var(--accent)') {
        return `
            <div class="progress-bar">
                <div class="progress-fill" style="width: ${percentage}%; background-color: ${color};"></div>
            </div>
        `;
    },
    
    // Cria um grupo de checkboxes
    checkboxGroup: function(options) {
        return options.map(option => `
            <div class="checkbox-group">
                <input type="checkbox" id="${option.id}" ${option.checked ? 'checked' : ''}>
                <label for="${option.id}">${option.label}</label>
            </div>
        `).join('');
    },
    
    // Cria um alerta
    alert: function(type, message, icon) {
        return `
            <div class="alert alert-${type}">
                <span>${icon}</span>
                <div>${message}</div>
            </div>
        `;
    },
    
    // Cria um conjunto de tabs
    tabs: function(tabsData) {
        const tabsHtml = tabsData.map(tab => 
            `<div class="tab ${tab.active ? 'active' : ''}" data-tab="${tab.id}">${tab.label}</div>`
        ).join('');
        
        const contentHtml = tabsData.map(tab => 
            `<div class="tab-content ${tab.active ? 'active' : ''}" id="${tab.id}">${tab.content}</div>`
        ).join('');
        
        return {
            tabs: `<div class="tabs">${tabsHtml}</div>`,
            content: contentHtml
        };
    },
    
    // Cria um formul√°rio com grid
    formGrid: function(rows) {
        return `
            <div class="form-grid">
                ${rows.map(row => `
                    <div>
                        <div class="form-help">${row.label}</div>
                        ${row.content}
                    </div>
                `).join('')}
            </div>
        `;
    },
    
    // Cria um status badge
    statusBadge: function(label, type) {
        return `<span class="status ${type}">${label}</span>`;
    }
};

// M√≥dulo de conte√∫do para backup
const BackupModule = {
    // Renderiza a tab de backup autom√°tico
    renderAutoBackup: function() {
        return `
            <div class="form-row">
                <div style="margin-bottom: 15px;">
                    <h3>Configura√ß√µes de Backup Autom√°tico</h3>
                    <div class="form-help">Configure backups autom√°ticos para garantir a seguran√ßa dos dados do sistema.</div>
                </div>
                
                <div class="form-row">
                    <label class="form-label">Status do Backup Autom√°tico</label>
                    <div style="margin-top: 10px;">
                        ${Components.toggleSwitch('Ativar backup autom√°tico', true)}
                    </div>
                </div>
                
                <div class="form-row">
                    <label class="form-label">Frequ√™ncia de Backup</label>
                    <select class="form-select">
                        <option>Di√°rio</option>
                        <option>Semanal (Domingo)</option>
                        <option>Semanal (Segunda-feira)</option>
                        <option>Quinzenal</option>
                        <option>Mensal</option>
                    </select>
                </div>
                
                <div class="form-row">
                    <label class="form-label">Hor√°rio do Backup</label>
                    <input type="time" class="form-input" value="02:00">
                    <div class="form-help">Recomendamos agendar o backup para hor√°rios de baixo uso do sistema.</div>
                </div>
                
                <div class="form-row">
                    <label class="form-label">Reten√ß√£o de Backups</label>
                    <div class="form-grid">
                        <div>
                            <div class="form-help">Backups di√°rios - manter por</div>
                            <select class="form-select">
                                <option>7 dias</option>
                                <option>14 dias</option>
                                <option>30 dias</option>
                            </select>
                        </div>
                        <div>
                            <div class="form-help">Backups semanais - manter por</div>
                            <select class="form-select">
                                <option>4 semanas</option>
                                <option>8 semanas</option>
                                <option>12 semanas</option>
                            </select>
                        </div>
                    </div>
                </div>
                
                <div class="form-row">
                    <label class="form-label">Locais de Armazenamento</label>
                    <div style="margin-top: 10px;">
                        ${Components.checkboxGroup([
                            { id: 'backup-local', label: 'Armazenamento local (servidor)', checked: true },
                            { id: 'backup-gdrive', label: 'Google Drive', checked: true },
                            { id: 'backup-s3', label: 'Amazon S3', checked: false },
                            { id: 'backup-ftp', label: 'FTP/SFTP', checked: false }
                        ])}
                    </div>
                </div>
            </div>
        `;
    },
    
    // Renderiza a tab de backup manual
    renderManualBackup: function() {
        const manualBackupHistory = [
            ['28/09/2024 14:30', 'Pr√©-atualiza√ß√£o do sistema', 'Completo', '1.2 GB', 'Carlos Oliveira', Components.statusBadge('Conclu√≠do', 'active')],
            ['15/09/2024 09:15', 'Backup semestral', 'Completo', '1.1 GB', 'Ricardo Santos', Components.statusBadge('Conclu√≠do', 'active')],
            ['01/08/2024 16:48', 'Antes da migra√ß√£o', 'Apenas BD', '350 MB', 'Carlos Oliveira', Components.statusBadge('Conclu√≠do', 'active')]
        ];
        
        const actions = [
            { title: 'Fazer Download', icon: '‚¨áÔ∏è' },
            { title: 'Restaurar', icon: 'üîÑ' },
            { title: 'Excluir', icon: '‚ùå', danger: true }
        ];
        
        return `
            <div class="form-row">
                <div style="margin-bottom: 15px;">
                    <h3>Backup Manual</h3>
                    <div class="form-help">Realize backups manuais do sistema quando necess√°rio.</div>
                </div>
                
                <div class="form-row">
                    ${Components.alert('info', 'Gerar um backup manual n√£o afeta a programa√ß√£o de backups autom√°ticos. Os backups manuais s√£o armazenados separadamente e n√£o s√£o exclu√≠dos pela pol√≠tica de reten√ß√£o autom√°tica.', '‚ÑπÔ∏è')}
                </div>
                
                <div class="form-row">
                    <label class="form-label">Op√ß√µes de Backup</label>
                    <div style="margin-top: 10px;">
                        ${Components.checkboxGroup([
                            { id: 'manual-banco', label: 'Banco de dados', checked: true },
                            { id: 'manual-arquivos', label: 'Arquivos enviados (fotos, documentos, etc.)', checked: true },
                            { id: 'manual-configs', label: 'Configura√ß√µes do sistema', checked: true },
                            { id: 'manual-logs', label: 'Logs do sistema', checked: false }
                        ])}
                    </div>
                </div>
                
                <div class="form-row">
                    <label class="form-label">Destino do Backup</label>
                    <select class="form-select">
                        <option>Todos os destinos configurados</option>
                        <option>Apenas armazenamento local</option>
                        <option>Apenas Google Drive</option>
                        <option>Download direto (navegador)</option>
                    </select>
                </div>
                
                <div class="form-row">
                    <label class="form-label">Descri√ß√£o do Backup</label>
                    <input type="text" class="form-input" placeholder="Ex: Backup antes da atualiza√ß√£o v2.5">
                    <div class="form-help">Opcional. Ajuda a identificar o prop√≥sito deste backup espec√≠fico.</div>
                </div>
                
                <div class="form-row">
                    <button class="btn btn-primary">üîÑ Iniciar Backup Manual</button>
                </div>
                
                <div class="form-row">
                    <label class="form-label">Hist√≥rico de Backups Manuais</label>
                    ${Components.dataTable(
                        ['Data e Hora', 'Descri√ß√£o', 'Conte√∫do', 'Tamanho', 'Realizado Por', 'Status', 'A√ß√µes'],
                        manualBackupHistory,
                        actions
                    )}
                </div>
            </div>
        `;
    },
    
    // Renderiza a tab de restaura√ß√£o
    renderRestoration: function() {
        // Lista de backups dispon√≠veis
        const backupsList = [
            ['<input type="radio" name="backup-select">', '29/09/2024 02:00', 'Autom√°tico', 'Completo', '1.3 GB', 'Local, Google Drive'],
            ['<input type="radio" name="backup-select">', '28/09/2024 14:30', 'Manual', 'Completo', '1.2 GB', 'Local, Google Drive'],
            ['<input type="radio" name="backup-select">', '28/09/2024 02:00', 'Autom√°tico', 'Completo', '1.2 GB', 'Local, Google Drive'],
            ['<input type="radio" name="backup-select">', '27/09/2024 02:00', 'Autom√°tico', 'Completo', '1.2 GB', 'Local, Google Drive']
        ];
        
        const detailsAction = [
            { title: 'Detalhes', icon: 'üîç' }
        ];
        
        return `
            <div class="form-row">
                <div style="margin-bottom: 15px;">
                    <h3>Restaura√ß√£o de Backup</h3>
                    <div class="form-help">Restaure o sistema a partir de um backup previamente criado.</div>
                </div>
                
                <div class="form-row">
                    ${Components.alert('warning', '<strong>Aten√ß√£o!</strong> A restaura√ß√£o de backup substituir√° todos os dados atuais pelos dados do backup selecionado. Esta a√ß√£o n√£o pode ser desfeita.', '‚ö†Ô∏è')}
                </div>
                
                <div class="form-row">
                    <label class="form-label">Selecione um Backup para Restaurar</label>
                    ${Components.dataTable(
                        ['Sele√ß√£o', 'Data e Hora', 'Tipo', 'Conte√∫do', 'Tamanho', 'Local', 'A√ß√µes'],
                        backupsList,
                        detailsAction
                    )}
                </div>
                
                <div class="form-row">
                    <label class="form-label">Restaurar a partir de Arquivo</label>
                    <input type="file" class="form-input">
                    <div class="form-help">Fa√ßa upload de um arquivo de backup anteriormente baixado.</div>
                </div>
                
                <div class="form-row">
                    <label class="form-label">Op√ß√µes de Restaura√ß√£o</label>
                    <div style="margin-top: 10px;">
                        ${Components.checkboxGroup([
                            { id: 'rest-banco', label: 'Banco de dados', checked: true },
                            { id: 'rest-arquivos', label: 'Arquivos enviados (fotos, documentos, etc.)', checked: true },
                            { id: 'rest-configs', label: 'Configura√ß√µes do sistema', checked: true },
                            { id: 'rest-logs', label: 'Logs do sistema', checked: false }
                        ])}
                    </div>
                </div>
                
                <div class="form-row">
                    <div class="checkbox-group">
                        <input type="checkbox" id="backup-pre-restauracao">
                        <label for="backup-pre-restauracao">Realizar backup do estado atual antes da restaura√ß√£o</label>
                    </div>
                </div>
                
                <div class="form-row">
                    <label class="form-label">Confirma√ß√£o de Seguran√ßa</label>
                    <input type="text" class="form-input" placeholder="Digite 'CONFIRMAR RESTAURA√á√ÉO' para prosseguir">
                </div>
                
                <div class="form-row">
                    <button class="btn btn-danger">Restaurar Sistema</button>
                </div>
            </div>
        `;
    },
    
    // Renderiza a tab de limpeza de dados
    renderDataCleaning: function() {
        const cleanupItems = [
            ['Cache do Sistema', '--', '620 MB', '28/09/2024'],
            ['Arquivos Tempor√°rios', '157 arquivos', '450 MB', '25/09/2024'],
            ['Logs Antigos', '--', '780 MB', '10/09/2024'],
            ['Backups Antigos', '8 backups', '2.4 GB', '05/09/2024']
        ];
        
        const cleanupActions = [
            { title: 'Limpar', icon: 'üßπ' }
        ];
        
        return `
            <div class="form-row">
                <div style="margin-bottom: 15px;">
                    <h3>Limpeza e Reten√ß√£o de Dados</h3>
                    <div class="form-help">Configure pol√≠ticas de limpeza e reten√ß√£o de dados no sistema.</div>
                </div>
                
                <div class="form-row">
                    <label class="form-label">Uso Atual de Armazenamento</label>
                    <div style="background-color: #f5f5f5; border-radius: 8px; padding: 15px; margin-bottom: 15px;">
                        <div style="margin-bottom: 15px;">
                            <div style="display: flex; justify-content: space-between; margin-bottom: 5px;">
                                <div>Espa√ßo Total:</div>
                                <div><strong>50 GB</strong></div>
                            </div>
                            <div style="display: flex; justify-content: space-between; margin-bottom: 5px;">
                                <div>Espa√ßo Utilizado:</div>
                                <div><strong>32.7 GB</strong> (65.4%)</div>
                            </div>
                            <div style="display: flex; justify-content: space-between;">
                                <div>Espa√ßo Livre:</div>
                                <div><strong>17.3 GB</strong> (34.6%)</div>
                            </div>
                        </div>
                        
                        ${Components.progressBar(65.4)}
                    </div>
                </div>
                
                <div class="form-row">
                    <label class="form-label">Pol√≠ticas de Reten√ß√£o</label>
                    <div style="margin-top: 10px;">
                        ${Components.formGrid([
                            { 
                                label: 'Logs do Sistema', 
                                content: `
                                    <select class="form-select">
                                        <option>1 m√™s</option>
                                        <option>3 meses</option>
                                        <option selected>6 meses</option>
                                        <option>1 ano</option>
                                        <option>Indefinidamente</option>
                                    </select>
                                `
                            },
                            { 
                                label: 'Logs de Acesso', 
                                content: `
                                    <select class="form-select">
                                        <option>1 m√™s</option>
                                        <option>3 meses</option>
                                        <option selected>6 meses</option>
                                        <option>1 ano</option>
                                        <option>Indefinidamente</option>
                                    </select>
                                `
                            }
                        ])}
                    </div>
                </div>
                
                <div class="form-row">
                    <label class="form-label">Arquivos Tempor√°rios</label>
                    <div style="margin-top: 10px;">
                        ${Components.toggleSwitch('Limpar automaticamente arquivos tempor√°rios', true)}
                        ${Components.toggleSwitch('Remover anexos de matr√≠culas canceladas ap√≥s 30 dias', true)}
                        ${Components.toggleSwitch('Remover fotos antigas quando atualizadas', true)}
                    </div>
                </div>
                
                <div class="form-row">
                    <label class="form-label">Limpeza Manual</label>
                    ${Components.dataTable(
                        ['Tipo de Dados', 'Quantidade', 'Tamanho', '√öltima Limpeza', 'A√ß√µes'],
                        cleanupItems,
                        cleanupActions
                    )}
                </div>
            </div>
        `;
    },
    
    // Renderiza o m√≥dulo completo
    render: function() {
        const tabsContent = [
            { id: 'backup-auto', label: 'Backup Autom√°tico', content: this.renderAutoBackup(), active: true },
            { id: 'backup-manual', label: 'Backup Manual', content: this.renderManualBackup(), active: false },
            { id: 'restauracao', label: 'Restaura√ß√£o', content: this.renderRestoration(), active: false },
            { id: 'limpeza', label: 'Limpeza de Dados', content: this.renderDataCleaning(), active: false }
        ];
        
        const tabsComponent = Components.tabs(tabsContent);
        
        return `
            <div class="settings-section active" id="backup">
                <h2 class="settings-title">Backup e Dados</h2>
                ${tabsComponent.tabs}
                ${tabsComponent.content}
            </div>
        `;
    }
};

// M√≥dulo de conte√∫do para logs
const LogsModule = {
    renderSystemLogs: function() {
        const systemLogsData = [
            ['29/09/2024 10:45:23', 'Carlos Oliveira', 'Edi√ß√£o', 'Configura√ß√µes', 'Altera√ß√£o nas configura√ß√µes de backup', '192.168.1.10'],
            ['29/09/2024 10:32:15', 'Carlos Oliveira', 'Login', 'Sistema', 'Login bem-sucedido', '192.168.1.10'],
            ['28/09/2024 16:20:45', 'Ricardo Santos', 'Cria√ß√£o', 'Matr√≠culas', 'Nova matr√≠cula: Jo√£o Pedro Silva', '192.168.1.25'],
            ['28/09/2024 15:18:32', 'Patr√≠cia Gomes', 'Edi√ß√£o', 'Alunos', 'Atualiza√ß√£o de dados: Maria Fernanda', '192.168.1.30'],
            ['28/09/2024 14:55:10', 'Fernando Souza', 'Exporta√ß√£o', 'Relat√≥rios', 'Exporta√ß√£o de relat√≥rio de frequ√™ncia', '192.168.1.40']
        ];
        
        const logActions = [
            { title: 'Ver Detalhes', icon: 'üîç' }
        ];
        
        return `
            <div class="form-row">
                <div style="margin-bottom: 15px;">
                    <h3>Atividades de Usu√°rios</h3>
                    <div class="form-help">Visualize e filtre o hist√≥rico de atividades realizadas pelos usu√°rios do sistema.</div>
                </div>
                
                <div class="form-row">
                    <div style="display: flex; gap: 10px; flex-wrap: wrap; margin-bottom: 15px;">
                        <div style="flex: 1; min-width: 150px;">
                            <div class="form-help">Usu√°rio</div>
                            <select class="form-select">
                                <option>Todos os usu√°rios</option>
                                <option>Carlos Oliveira</option>
                                <option>Ricardo Santos</option>
                                <option>Patr√≠cia Gomes</option>
                                <option>Fernando Souza</option>
                            </select>
                        </div>
                        <div style="flex: 1; min-width: 150px;">
                            <div class="form-help">Tipo de A√ß√£o</div>
                            <select class="form-select">
                                <option>Todas as a√ß√µes</option>
                                <option>Login/Logout</option>
                                <option>Cria√ß√£o</option>
                                <option>Edi√ß√£o</option>
                                <option>Exclus√£o</option>
                                <option>Exporta√ß√£o</option>
                            </select>
                        </div>
                        <div style="flex: 1; min-width: 150px;">
                            <div class="form-help">M√≥dulo</div>
                            <select class="form-select">
                                <option>Todos os m√≥dulos</option>
                                <option>Matr√≠culas</option>
                                <option>Alunos</option>
                                <option>Turmas</option>
                                <option>Usu√°rios</option>
                                <option>Configura√ß√µes</option>
                            </select>
                        </div>
                        <div style="flex: 1; min-width: 150px;">
                            <div class="form-help">Per√≠odo</div>
                            <select class="form-select">
                                <option>√öltimas 24 horas</option>
                                <option>√öltimos 7 dias</option>
                                <option>√öltimos 30 dias</option>
                                <option>Personalizado</option>
                            </select>
                        </div>
                    </div>
                    <div style="display: flex; gap: 10px; justify-content: flex-end; margin-bottom: 15px;">
                        <button class="btn btn-outline">Limpar Filtros</button>
                        <button class="btn btn-primary">Aplicar Filtros</button>
                    </div>
                </div>
                
                <div class="form-row">
                    ${Components.dataTable(
                        ['Data e Hora', 'Usu√°rio', 'A√ß√£o', 'M√≥dulo', 'Descri√ß√£o', 'IP', 'Detalhes'],
                        userActivitiesData,
                        activityActions
                    )}
                    <div style="display: flex; justify-content: space-between; align-items: center; margin-top: 15px;">
                        <div>
                            <button class="btn btn-outline">‚¨áÔ∏è Exportar Logs</button>
                        </div>
                        <div style="display: flex; gap: 5px; align-items: center;">
                            <button class="btn btn-outline btn-sm">¬´</button>
                            <button class="btn btn-outline btn-sm" style="background-color: var(--primary); color: white;">1</button>
                            <button class="btn btn-outline btn-sm">2</button>
                            <button class="btn btn-outline btn-sm">3</button>
                            <button class="btn btn-outline btn-sm">¬ª</button>
                            <span style="margin-left: 10px; color: var(--gray); font-size: 14px;">Mostrando 1-5 de 1245 registros</span>
                        </div>
                    </div>
                </div>
                
                <div class="form-row">
                    <label class="form-label">Configura√ß√µes de Log</label>
                    <div style="margin-top: 10px;">
                        ${Components.formGrid([
                            { 
                                label: 'N√≠vel M√≠nimo de Log', 
                                content: `
                                    <select class="form-select">
                                        <option>Debug</option>
                                        <option selected>Info</option>
                                        <option>Warning</option>
                                        <option>Error</option>
                                        <option>Critical</option>
                                    </select>
                                `
                            },
                            { 
                                label: 'Reten√ß√£o de Logs', 
                                content: `
                                    <select class="form-select">
                                        <option>30 dias</option>
                                        <option>60 dias</option>
                                        <option selected>90 dias</option>
                                        <option>180 dias</option>
                                        <option>365 dias</option>
                                    </select>
                                `
                            }
                        ])}
                    </div>
                </div>
            </div>
        `;
    },
    
    // Renderiza a tab de seguran√ßa e auditoria
    renderSecurityAudit: function() {
        const securityEvents = [
            ['29/09/2024 09:45:28', 'Acesso a Dados Sens√≠veis', 'Carlos Oliveira', '192.168.1.10', 'Visualiza√ß√£o de informa√ß√µes financeiras de 3 alunos', Components.statusBadge('M√©dia', 'warning')],
            ['28/09/2024 17:22:45', 'Exporta√ß√£o em Massa', 'Fernando Souza', '192.168.1.40', 'Exporta√ß√£o de dados de 230 alunos', Components.statusBadge('M√©dia', 'warning')],
            ['28/09/2024 15:30:12', 'Altera√ß√£o de Permiss√µes', 'Carlos Oliveira', '192.168.1.10', 'Modifica√ß√£o nas permiss√µes do usu√°rio Ricardo Santos', Components.statusBadge('M√©dia', 'warning')],
            ['27/09/2024 10:15:30', 'Falha de Autentica√ß√£o', 'Unknown', '203.0.113.45', '5 tentativas falhas de login para conta admin', Components.statusBadge('Alta', 'error')]
        ];
        
        const securityActions = [
            { title: 'Ver Detalhes', icon: 'üîç' }
        ];
        
        return `
            <div class="form-row">
                <div style="margin-bottom: 15px;">
                    <h3>Seguran√ßa e Auditoria</h3>
                    <div class="form-help">Configure logs de seguran√ßa e auditoria para monitorar o acesso a dados sens√≠veis.</div>
                </div>
                
                <div class="form-row">
                    <label class="form-label">Configura√ß√µes de Auditoria</label>
                    <div style="margin-top: 10px;">
                        ${Components.toggleSwitch('Ativar logs de auditoria', true)}
                        ${Components.toggleSwitch('Registrar acesso a dados sens√≠veis', true)}
                        ${Components.toggleSwitch('Registrar altera√ß√µes em permiss√µes', true)}
                        ${Components.toggleSwitch('Registrar falhas de autentica√ß√£o', true)}
                        ${Components.toggleSwitch('Registrar exporta√ß√£o de dados', true)}
                    </div>
                </div>
                
                <div class="form-row">
                    <label class="form-label">Campos Sens√≠veis para Auditoria</label>
                    <div style="margin-top: 10px; display: flex; flex-wrap: wrap; gap: 5px; margin-bottom: 10px;">
                        <span class="badge">CPF</span>
                        <span class="badge">RG</span>
                        <span class="badge">Endere√ßo</span>
                        <span class="badge">Contatos</span>
                        <span class="badge">Informa√ß√µes financeiras</span>
                        <span class="badge">Dados de sa√∫de</span>
                        <span class="badge">Informa√ß√µes escolares</span>
                    </div>
                    <input type="text" class="form-input" placeholder="Digite e pressione Enter para adicionar...">
                </div>
                
                <div class="form-row">
                    <label class="form-label">Eventos de Seguran√ßa Recentes</label>
                    ${Components.dataTable(
                        ['Data e Hora', 'Tipo', 'Usu√°rio', 'IP', 'Descri√ß√£o', 'Severidade', 'Detalhes'],
                        securityEvents,
                        securityActions
                    )}
                </div>
                
                <div class="form-row">
                    <label class="form-label">Reten√ß√£o de Logs de Auditoria</label>
                    <select class="form-select">
                        <option>90 dias</option>
                        <option selected>180 dias</option>
                        <option>1 ano</option>
                        <option>2 anos</option>
                        <option>5 anos</option>
                    </select>
                    <div class="form-help">Per√≠odo de reten√ß√£o para logs de auditoria de seguran√ßa.</div>
                </div>
            </div>
        `;
    },
    
    // Renderiza a tab de alertas
    renderAlerts: function() {
        const alertConfigs = [
            ['Falha de login repetida', 'Mais de 5 tentativas falhas em 10 minutos', Components.statusBadge('Alta', 'error'), 'E-mail, Dashboard', Components.statusBadge('Ativo', 'active')],
            ['Acesso a dados sens√≠veis', 'Acesso em massa a dados de alunos', Components.statusBadge('M√©dia', 'warning'), 'E-mail, Dashboard', Components.statusBadge('Ativo', 'active')],
            ['Falha de backup', 'Backup autom√°tico falhou', Components.statusBadge('Alta', 'error'), 'E-mail, Dashboard, SMS', Components.statusBadge('Ativo', 'active')],
            ['Erro cr√≠tico do sistema', 'Erro que afeta funcionalidades principais', Components.statusBadge('Alta', 'error'), 'E-mail, Dashboard, SMS', Components.statusBadge('Ativo', 'active')]
        ];
        
        const alertActions = [
            { title: 'Editar', icon: '‚úèÔ∏è' },
            { title: 'Desativar', icon: '‚ùå', danger: true }
        ];
        
        return `
            <div class="form-row">
                <div style="margin-bottom: 15px;">
                    <h3>Configura√ß√µes de Alertas</h3>
                    <div class="form-help">Configure alertas autom√°ticos para eventos importantes do sistema.</div>
                </div>
                
                <div class="form-row">
                    <label class="form-label">Canais de Notifica√ß√£o</label>
                    <div style="margin-top: 10px;">
                        ${Components.toggleSwitch('E-mail', true)}
                        ${Components.toggleSwitch('Notifica√ß√£o no Dashboard', true)}
                        ${Components.toggleSwitch('SMS', false)}
                        ${Components.toggleSwitch('Webhook', false)}
                    </div>
                </div>
                
                <div class="form-row">
                    <label class="form-label">E-mails para Alertas</label>
                    <input type="text" class="form-input" value="admin@superacao.org.br, seguranca@superacao.org.br">
                    <div class="form-help">Separe m√∫ltiplos e-mails com v√≠rgulas.</div>
                </div>
                
                <div class="form-row">
                    <label class="form-label">Configura√ß√µes de Alertas</label>
                    ${Components.dataTable(
                        ['Tipo de Alerta', 'Descri√ß√£o', 'Severidade', 'Canais', 'Status', 'A√ß√µes'],
                        alertConfigs,
                        alertActions
                    )}
                    <button class="btn btn-outline" style="margin-top: 10px;">‚ûï Novo Alerta</button>
                </div>
            </div>
        `;
    },
    
    // Renderiza o m√≥dulo completo
    render: function() {
        const tabsContent = [
            { id: 'atividades', label: 'Atividades de Usu√°rios', content: this.renderUserActivities(), active: true },
            { id: 'sistema', label: 'Logs do Sistema', content: this.renderSystemLogs(), active: false },
            { id: 'seguranca', label: 'Seguran√ßa e Auditoria', content: this.renderSecurityAudit(), active: false },
            { id: 'alertas', label: 'Configura√ß√µes de Alertas', content: this.renderAlerts(), active: false }
        ];
        
        const tabsComponent = Components.tabs(tabsContent);
        
        return `
            <div class="settings-section" id="logs">
                <h2 class="settings-title">Logs e Atividades</h2>
                ${tabsComponent.tabs}
                ${tabsComponent.content}
            </div>
        `;
    }
};

// Gerenciador de aplica√ß√£o
const App = {
    modules: {
        backup: BackupModule,
        logs: LogsModule
    },
    
    // Inicializa a aplica√ß√£o
    init: function() {
        this.renderNavigation();
        this.activateSection('backup'); // Se√ß√£o padr√£o
        this.setupEventListeners();
    },
    
    // Configura event listeners
    setupEventListeners: function() {
        // Adicionar event listeners para os itens de navega√ß√£o
        document.querySelectorAll('.settings-nav-item').forEach(item => {
            item.addEventListener('click', (e) => {
                const sectionId = e.currentTarget.getAttribute('data-section');
                this.activateSection(sectionId);
            });
        });
        
        // Event listener para o bot√£o salvar
        document.getElementById('save-settings').addEventListener('click', () => {
            this.saveSettings();
        });
        
        // Adicionar event listeners para as tabs (delega√ß√£o de eventos)
        document.addEventListener('click', (e) => {
            if (e.target.classList.contains('tab') || e.target.parentElement.classList.contains('tab')) {
                const tab = e.target.classList.contains('tab') ? e.target : e.target.parentElement;
                const tabId = tab.getAttribute('data-tab');
                this.activateTab(tab, tabId);
            }
        });
    },
    
    // Ativa uma tab espec√≠fica
    activateTab: function(tabElement, tabId) {
        // Encontrar o cont√™iner de tabs pai
        const tabsContainer = tabElement.parentElement;
        const tabContentContainer = tabsContainer.parentElement;
        
        // Desativar todas as tabs no mesmo cont√™iner
        tabsContainer.querySelectorAll('.tab').forEach(tab => {
            tab.classList.remove('active');
        });
        
        // Desativar todos os conte√∫dos de tab
        tabContentContainer.querySelectorAll('.tab-content').forEach(content => {
            content.classList.remove('active');
        });
        
        // Ativar a tab clicada
        tabElement.classList.add('active');
        
        // Ativar o conte√∫do correspondente
        const tabContent = tabContentContainer.querySelector(`#${tabId}`);
        if (tabContent) {
            tabContent.classList.add('active');
        }
    },
    
    // Ativa uma se√ß√£o espec√≠fica
    activateSection: function(sectionId) {
        // Remover classe active de todas as se√ß√µes e itens de navega√ß√£o
        document.querySelectorAll('.settings-section').forEach(section => {
            section.classList.remove('active');
        });
        
        document.querySelectorAll('.settings-nav-item').forEach(item => {
            item.classList.remove('active');
        });
        
        // Ativar o item de navega√ß√£o correspondente
        const navItem = document.querySelector(`.settings-nav-item[data-section="${sectionId}"]`);
        if (navItem) {
            navItem.classList.add('active');
        }
        
        // Renderizar e ativar a se√ß√£o
        this.renderSection(sectionId);
    },
    
    // Renderiza uma se√ß√£o espec√≠fica
    renderSection: function(sectionId) {
        const module = this.modules[sectionId];
        
        // Se o m√≥dulo existe, renderize seu conte√∫do
        if (module) {
            const contentContainer = document.querySelector('.settings-content');
            contentContainer.innerHTML = module.render();
            
            // Ativar a primeira tab se existir
            const firstTab = document.querySelector('.settings-content .tab');
            if (firstTab) {
                const tabId = firstTab.getAttribute('data-tab');
                const tabContent = document.getElementById(tabId);
                if (tabContent) {
                    tabContent.classList.add('active');
                }
            }
        } else {
            console.warn(`M√≥dulo '${sectionId}' n√£o encontrado.`);
        }
    },
    
    // Salva as configura√ß√µes
    saveSettings: function() {
        // Simula√ß√£o de salvamento
        console.log('Salvando configura√ß√µes...');
        
        // Mostrar feedback ao usu√°rio
        alert('Configura√ß√µes salvas com sucesso!');
    },
    
    // Renderiza a navega√ß√£o lateral
    renderNavigation: function() {
        const navItems = [
            { id: 'geral', icon: '‚öôÔ∏è', label: 'Configura√ß√µes Gerais' },
            { id: 'aparencia', icon: 'üé®', label: 'Apar√™ncia' },
            { id: 'unidades', icon: 'üè¢', label: 'Unidades' },
            { id: 'turmas', icon: 'üë•', label: 'Turmas' },
            { id: 'usuarios', icon: 'üë§', label: 'Usu√°rios e Permiss√µes' },
            { id: 'formularios', icon: 'üìã', label: 'Personaliza√ß√£o de Formul√°rios' },
            { id: 'comunicacao', icon: 'üì±', label: 'Comunica√ß√£o' },
            { id: 'carteirinhas', icon: 'ü™™', label: 'Carteirinhas' },
            { id: 'integracao', icon: 'üîå', label: 'Integra√ß√µes' },
            { id: 'campanha', icon: 'üó≥Ô∏è', label: 'Configura√ß√µes de Campanha' },
            { id: 'backup', icon: 'üíæ', label: 'Backup e Dados', active: true },
            { id: 'logs', icon: 'üìä', label: 'Logs e Atividades' }
        ];
        
        const navHtml = navItems.map(item => `
            <div class="settings-nav-item ${item.active ? 'active' : ''}" data-section="${item.id}">
                <i>${item.icon}</i>
                <span>${item.label}</span>
            </div>
        `).join('');
        
        document.querySelector('.settings-nav').innerHTML = navHtml;
    }
};

// Iniciar a aplica√ß√£o quando o DOM estiver pronto

document.addEventListener('DOMContentLoaded', function() {
    App.init();
});

    
    // Renderiza a tab de logs do sistema
    renderSystemLogs: function() {
        const systemLogsData = [
            ['29/09/2024 10:55:12', '<span class="level-indicator level-info"></span> Info', 'Backup', 'Backup configuration updated by user Carlos Oliveira', 'BackupController.php', '145'],
            ['29/09/2024 10:32:15', '<span class="level-indicator level-info"></span> Info', 'Authentication', 'User Carlos Oliveira logged in successfully', 'AuthController.php', '78'],
            ['29/09/2024 02:00:03', '<span class="level-indicator level-info"></span> Info', 'Backup', 'Automated backup started', 'BackupService.php', '210'],
            ['29/09/2024 02:05:48', '<span class="level-indicator level-info"></span> Info', 'Backup', 'Automated backup completed successfully', 'BackupService.php', '342'],
            ['28/09/2024 18:32:45', '<span class="level-indicator level-warning"></span> Warning', 'Database', 'Slow query detected (>1s): SELECT * FROM matriculas WHERE...', 'MatriculaRepository.php', '156']
        ];
        
        const logActions = [
            { title: 'Ver Detalhes', icon: 'üîç' }
        ];
        
        return `
            <div class="form-row">
                <div style="margin-bottom: 15px;">
                    <h3>Logs do Sistema</h3>
                    <div class="form-help">Visualize os logs t√©cnicos do sistema para diagn√≥stico e resolu√ß√£o de problemas.</div>
                </div>
                
                <div class="form-row">
                    <div style="display: flex; gap: 10px; flex-wrap: wrap; margin-bottom: 15px;">
                        <div style="flex: 1; min-width: 150px;">
                            <div class="form-help">N√≠vel</div>
                            <select class="form-select">
                                <option>Todos os n√≠veis</option>
                                <option>Info</option>
                                <option>Warning</option>
                                <option>Error</option>
                                <option>Debug</option>
                                <option>Critical</option>
                            </select>
                        </div>
                        <div style="flex: 1; min-width: 150px;">
                            <div class="form-help">Componente</div>
                            <select class="form-select">
                                <option>Todos os componentes</option>
                                <option>Database</option>
                                <option>Authentication</option>
                                <option>API</option>
                                <option>FileSystem</option>
                                <option>Cache</option>
                                <option>Email</option>
                                <option>Integration</option>
                            </select>
                        </div>
                        <div style="flex: 1; min-width: 150px;">
                            <div class="form-help">Per√≠odo</div>
                            <select class="form-select">
                                <option>√öltimas 24 horas</option>
                                <option>√öltimos 7 dias</option>
                                <option>√öltimos 30 dias</option>
                                <option>Personalizado</option>
                            </select>
                        </div>
                        <div style="flex: 1; min-width: 150px;">
                            <div class="form-help">Pesquisar</div>
                            <input type="text" class="form-input" placeholder="Termo de busca...">
                        </div>
                    </div>
                    <div style="display: flex; gap: 10px; justify-content: flex-end; margin-bottom: 15px;">
                        <button class="btn btn-outline">Limpar Filtros</button>
                        <button class="btn btn-primary">Aplicar Filtros</button>
                    </div>
                </div>
                
                <div class="form-row">
                    ${Components.dataTable(
                        ['Data e Hora', 'N√≠vel', 'Componente', 'Mensagem', 'Arquivo', 'Linha', 'Detalhes'],
                        systemLogsData,
                        logActions
                    )}
                    <div style="display: flex; justify-content: space-between; align-items: center; margin-top: 15px;">
                        <div>
                            <button class="btn btn-outline">‚¨áÔ∏è Exportar Logs</button>
                        </div>
                        <div style="display: flex; gap: 5px; align-items: center;">
                            <button class="btn btn-outline btn-sm">¬´</button>
                            <button class="btn btn-outline btn-sm" style="background-color: var(--primary); color: white;">1</button>
                            <button class="btn btn-outline btn-sm">2</button>
                            <button class="btn btn-outline btn-sm">3</button>
                            <button class="btn btn-outline btn-sm">¬ª</button>
                            <span style="margin-left: 10px; color: var(--gray); font-size: 14px;">Mostrando 1-5 de 1245 registros</span>
                        </div>
                    </div>
                </div>
                
                <div class="form-row">
                    <label class="form-label">Configura√ß√µes de Log</label>
                    <div style="margin-top: 10px;">
                        ${Components.formGrid([
                            { 
                                label: 'N√≠vel M√≠nimo de Log', 
                                content: `
                                    <select class="form-select">
                                        <option>Debug</option>
                                        <option selected>Info</option>
                                        <option>Warning</option>
                                        <option>Error</option>
                                        <option>Critical</option>
                                    </select>
                                `
                            },
                            { 
                                label: 'Reten√ß√£o de Logs', 
                                content: `
                                    <select class="form-select">
                                        <option>30 dias</option>
                                        <option>60 dias</option>
                                        <option selected>90 dias</option>
                                        <option>180 dias</option>
                                        <option>365 dias</option>
                                    </select>
                                `
                            }
                        ])}
                    </div>
                </div>
            </div>
        `;
    },
    
    // Renderiza a tab de seguran√ßa e auditoria
    renderSecurityAudit: function() {
        const securityEvents = [
            ['29/09/2024 09:45:28', 'Acesso a Dados Sens√≠veis', 'Carlos Oliveira', '192.168.1.10', 'Visualiza√ß√£o de informa√ß√µes financeiras de 3 alunos', Components.statusBadge('M√©dia', 'warning')],
            ['28/09/2024 17:22:45', 'Exporta√ß√£o em Massa', 'Fernando Souza', '192.168.1.40', 'Exporta√ß√£o de dados de 230 alunos', Components.statusBadge('M√©dia', 'warning')],
            ['28/09/2024 15:30:12', 'Altera√ß√£o de Permiss√µes', 'Carlos Oliveira', '192.168.1.10', 'Modifica√ß√£o nas permiss√µes do usu√°rio Ricardo Santos', Components.statusBadge('M√©dia', 'warning')],
            ['27/09/2024 10:15:30', 'Falha de Autentica√ß√£o', 'Unknown', '203.0.113.45', '5 tentativas falhas de login para conta admin', Components.statusBadge('Alta', 'error')]
        ];
        
        const securityActions = [
            { title: 'Ver Detalhes', icon: 'üîç' }
        ];
        
        return `
            <div class="form-row">
                <div style="margin-bottom: 15px;">
                    <h3>Seguran√ßa e Auditoria</h3>
                    <div class="form-help">Configure logs de seguran√ßa e auditoria para monitorar o acesso a dados sens√≠veis.</div>
                </div>
                
                <div class="form-row">
                    <label class="form-label">Configura√ß√µes de Auditoria</label>
                    <div style="margin-top: 10px;">
                        ${Components.toggleSwitch('Ativar logs de auditoria', true)}
                        ${Components.toggleSwitch('Registrar acesso a dados sens√≠veis', true)}
                        ${Components.toggleSwitch('Registrar altera√ß√µes em permiss√µes', true)}
                        ${Components.toggleSwitch('Registrar falhas de autentica√ß√£o', true)}
                        ${Components.toggleSwitch('Registrar exporta√ß√£o de dados', true)}
                    </div>
                </div>
                
                <div class="form-row">
                    <label class="form-label">Campos Sens√≠veis para Auditoria</label>
                    <div style="margin-top: 10px; display: flex; flex-wrap: wrap; gap: 5px; margin-bottom: 10px;">
                        <span class="badge">CPF</span>
                        <span class="badge">RG</span>
                        <span class="badge">Endere√ßo</span>
                        <span class="badge">Contatos</span>
                        <span class="badge">Informa√ß√µes financeiras</span>
                        <span class="badge">Dados de sa√∫de</span>
                        <span class="badge">Informa√ß√µes escolares</span>
                    </div>
                    <input type="text" class="form-input" placeholder="Digite e pressione Enter para adicionar...">
                </div>
                
                <div class="form-row">
                    <label class="form-label">Eventos de Seguran√ßa Recentes</label>
                    ${Components.dataTable(
                        ['Data e Hora', 'Tipo', 'Usu√°rio', 'IP', 'Descri√ß√£o', 'Severidade', 'Detalhes'],
                        securityEvents,
                        securityActions
                    )}
                </div>
                
                <div class="form-row">
                    <label class="form-label">Reten√ß√£o de Logs de Auditoria</label>
                    <select class="form-select">
                        <option>90 dias</option>
                        <option selected>180 dias</option>
                        <option>1 ano</option>
                        <option>2 anos</option>
                        <option>5 anos</option>
                    </select>
                    <div class="form-help">Per√≠odo de reten√ß√£o para logs de auditoria de seguran√ßa.</div>
                </div>
            </div>
        `;
    },
    
    // Renderiza a tab de alertas
    renderAlerts: function() {
        const alertConfigs = [
            ['Falha de login repetida', 'Mais de 5 tentativas falhas em 10 minutos', Components.statusBadge('Alta', 'error'), 'E-mail, Dashboard', Components.statusBadge('Ativo', 'active')],
            ['Acesso a dados sens√≠veis', 'Acesso em massa a dados de alunos', Components.statusBadge('M√©dia', 'warning'), 'E-mail, Dashboard', Components.statusBadge('Ativo', 'active')],
            ['Falha de backup', 'Backup autom√°tico falhou', Components.statusBadge('Alta', 'error'), 'E-mail, Dashboard, SMS', Components.statusBadge('Ativo', 'active')],
            ['Erro cr√≠tico do sistema', 'Erro que afeta funcionalidades principais', Components.statusBadge('Alta', 'error'), 'E-mail, Dashboard, SMS', Components.statusBadge('Ativo', 'active')]
        ];
        
        const alertActions = [
            { title: 'Editar', icon: '‚úèÔ∏è' },
            { title: 'Desativar', icon: '‚ùå', danger: true }
        ];
        
        return `
            <div class="form-row">
                <div style="margin-bottom: 15px;">
                    <h3>Configura√ß√µes de Alertas</h3>
                    <div class="form-help">Configure alertas autom√°ticos para eventos importantes do sistema.</div>
                </div>
                
                <div class="form-row">
                    <label class="form-label">Canais de Notifica√ß√£o</label>
                    <div style="margin-top: 10px;">
                        ${Components.toggleSwitch('E-mail', true)}
                        ${Components.toggleSwitch('Notifica√ß√£o no Dashboard', true)}
                        ${Components.toggleSwitch('SMS', false)}
                        ${Components.toggleSwitch('Webhook', false)}
                    </div>
                </div>
                
                <div class="form-row">
                    <label class="form-label">E-mails para Alertas</label>
                    <input type="text" class="form-input" value="admin@superacao.org.br, seguranca@superacao.org.br">
                    <div class="form-help">Separe m√∫ltiplos e-mails com v√≠rgulas.</div>
                </div>
                
                <div class="form-row">
                    <label class="form-label">Configura√ß√µes de Alertas</label>
                    ${Components.dataTable(
                        ['Tipo de Alerta', 'Descri√ß√£o', 'Severidade', 'Canais', 'Status', 'A√ß√µes'],
                        alertConfigs,
                        alertActions
                    )}
                    <button class="btn btn-outline" style="margin-top: 10px;">‚ûï Novo Alerta</button>
                </div>
            </div>
        `;
    },
    
    // Renderiza o m√≥dulo completo
    render: function() {
        const tabsContent = [
            { id: 'atividades', label: 'Atividades de Usu√°rios', content: this.renderUserActivities(), active: true },
            { id: 'sistema', label: 'Logs do Sistema', content: this.renderSystemLogs(), active: false },
            { id: 'seguranca', label: 'Seguran√ßa e Auditoria', content: this.renderSecurityAudit(), active: false },
            { id: 'alertas', label: 'Configura√ß√µes de Alertas', content: this.renderAlerts(), active: false }
        ];
        
        const tabsComponent = Components.tabs(tabsContent);
        
        return `
            <div class="settings-section" id="logs">
                <h2 class="settings-title">Logs e Atividades</h2>
                ${tabsComponent.tabs}
                ${tabsComponent.content}
            </div>
        `;
    }
};

// Gerenciador de aplica√ß√£o
const App = {
    // Armazena refer√™ncias a todos os m√≥dulos
    modules: {
        backup: BackupModule,
        logs: LogsModule
        // Adicione outros m√≥dulos aqui
    },
    
    // Inicializa a aplica√ß√£o
    init: function() {
        this.renderNavigation();
        this.activateSection('backup'); // Se√ß√£o padr√£o
        this.setupEventListeners();
    },
    
    // Configura event listeners
    setupEventListeners: function() {
        // Adicionar event listeners para os itens de navega√ß√£o
        document.querySelectorAll('.settings-nav-item').forEach(item => {
            item.addEventListener('click', (e) => {
                const sectionId = e.currentTarget.getAttribute('data-section');
                this.activateSection(sectionId);
            });
        });
        
        // Event listener para o bot√£o salvar
        document.getElementById('save-settings').addEventListener('click', () => {
            this.saveSettings();
        });
        
        // Adicionar event listeners para as tabs (delega√ß√£o de eventos)
        document.addEventListener('click', (e) => {
            if (e.target.classList.contains('tab') || e.target.parentElement.classList.contains('tab')) {
                const tab = e.target.classList.contains('tab') ? e.target : e.target.parentElement;
                const tabId = tab.getAttribute('data-tab');
                this.activateTab(tab, tabId);
            }
        });
    },
    
    // Ativa uma tab espec√≠fica
    activateTab: function(tabElement, tabId) {
        // Encontrar o cont√™iner de tabs pai
        const tabsContainer = tabElement.parentElement;
        const tabContentContainer = tabsContainer.parentElement;
        
        // Desativar todas as tabs no mesmo cont√™iner
        tabsContainer.querySelectorAll('.tab').forEach(tab => {
            tab.classList.remove('active');
        });
        
        // Desativar todos os conte√∫dos de tab
        tabContentContainer.querySelectorAll('.tab-content').forEach(content => {
            content.classList.remove('active');
        });
        
        // Ativar a tab clicada
        tabElement.classList.add('active');
        
        // Ativar o conte√∫do correspondente
        const tabContent = tabContentContainer.querySelector(`#${tabId}`);
        if (tabContent) {
            tabContent.classList.add('active');
        }
    },
    
    // Ativa uma se√ß√£o espec√≠fica
    activateSection: function(sectionId) {
        // Remover classe active de todas as se√ß√µes e itens de navega√ß√£o
        document.querySelectorAll('.settings-section').forEach(section => {
            section.classList.remove('active');
        });
        
        document.querySelectorAll('.settings-nav-item').forEach(item => {
            item.classList.remove('active');
        });
        
        // Ativar o item de navega√ß√£o correspondente
        const navItem = document.querySelector(`.settings-nav-item[data-section="${sectionId}"]`);
        if (navItem) {
            navItem.classList.add('active');
        }
        
        // Renderizar e ativar a se√ß√£o
        this.renderSection(sectionId);
    },
    
    // Renderiza uma se√ß√£o espec√≠fica
    renderSection: function(sectionId) {
        const module = this.modules[sectionId];
        
        // Se o m√≥dulo existe, renderize seu conte√∫do
        if (module) {
            const contentContainer = document.querySelector('.settings-content');
            contentContainer.innerHTML = module.render();
            
            // Ativar a primeira tab se existir
            const firstTab = document.querySelector('.settings-content .tab');
            if (firstTab) {
                const tabId = firstTab.getAttribute('data-tab');
                const tabContent = document.getElementById(tabId);
                if (tabContent) {
                    tabContent.classList.add('active');
                }
            }
        } else {
            console.warn(`M√≥dulo '${sectionId}' n√£o encontrado.`);
        }
    },
    
    // Salva as configura√ß√µes
    saveSettings: function() {
        // Simula√ß√£o de salvamento
        console.log('Salvando configura√ß√µes...');
        
        // Mostrar feedback ao usu√°rio
        alert('Configura√ß√µes salvas com sucesso!');
    },
    
    // Renderiza a navega√ß√£o lateral
    renderNavigation: function() {
        const navItems = [
            { id: 'geral', icon: '‚öôÔ∏è', label: 'Configura√ß√µes Gerais' },
            { id: 'aparencia', icon: 'üé®', label: 'Apar√™ncia' },
            { id: 'unidades', icon: 'üè¢', label: 'Unidades' },
            { id: 'turmas', icon: 'üë•', label: 'Turmas' },
            { id: 'usuarios', icon: 'üë§', label: 'Usu√°rios e Permiss√µes' },
            { id: 'formularios', icon: 'üìã', label: 'Personaliza√ß√£o de Formul√°rios' },
            { id: 'comunicacao', icon: 'üì±', label: 'Comunica√ß√£o' },
            { id: 'carteirinhas', icon: 'ü™™', label: 'Carteirinhas' },
            { id: 'integracao', icon: 'üîå', label: 'Integra√ß√µes' },
            { id: 'campanha', icon: 'üó≥Ô∏è', label: 'Configura√ß√µes de Campanha' },
            { id: 'backup', icon: 'üíæ', label: 'Backup e Dados', active: true },
            { id: 'logs', icon: 'üìä', label: 'Logs e Atividades' }
        ];
        
        const navHtml = navItems.map(item => `
            <div class="settings-nav-item ${item.active ? 'active' : ''}" data-section="${item.id}">
                <i>${item.icon}</i>
                <span>${item.label}</span>
            </div>
        `).join('');
        
        document.querySelector('.settings-nav').innerHTML = navHtml;
    }
};

// Iniciar a aplica√ß√£o quando o DOM estiver pronto
document.addEventListener('DOMContentLoaded', function() {
    App.init();
});